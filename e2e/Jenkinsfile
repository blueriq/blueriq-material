#!groovy

properties([
  [
    $class  : 'BuildDiscarderProperty',
    strategy: [$class: 'LogRotator', numToKeepStr: '5']
  ],
  parameters([
    gitParameter(name: 'BRANCH_NAME', defaultValue: 'master', selectedValue: 'DEFAULT', type: 'PT_BRANCH'),
    string(name: 'RUNTIME_BRANCH', defaultValue: 'master', description: "The runtime branch to test against"),
  ])
])
node {
  try {
    env.JAVA_HOME = tool 'jdk-17.0.1';
    def mvnHome = tool "apache-maven-3.6.0";
    def nodeHome = tool 'node-14.17.0'
    env.PATH = "${env.JAVA_HOME}\\bin;${mvnHome}\\bin;${nodeHome};${env.PATH}";

    env.CHROME_BIN = env.CHROME_80_0_3987_132;
    env.CHROME_DRIVER = env.CHROME_DRIVER_80;
    env.FIREFOX_BIN = env.FIREFOX_73_0_1;
    env.GECKO_DRIVER = env.GECKO_DRIVER_0_26;
    env.COMPOSE_PROJECT_NAME = "material-e2e";

    def cdsVersion;
    def dcmListsVersion;

    stage('checkout') {
      checkout scm;
      bat "git checkout ${params.BRANCH_NAME}";
    }

    stage('checkout runtime') {
      dir('runtime') {
        git branch: "${params.RUNTIME_BRANCH}", url: "${env.RUNTIME_GIT_URL}";
        dir('Runtime') {
          bat "mvn clean verify -DskipTests -P!quality -am -pl runtime/blueriq-runtime-application";
          cdsVersion = bat(script: "@mvn help:evaluate -Dexpression=com.blueriq.customerdata.api.version -q -DforceStdout", returnStdout: true).trim();
          echo "Using Customerdata version ${cdsVersion}";
          dcmListsVersion = bat(script: "@mvn help:evaluate -Dexpression=com.blueriq.dcm.lists.api.version -q -DforceStdout", returnStdout: true).trim();
          echo "Using DCM lists version ${dcmListsVersion}";
        }
      }
    }

    stage('install') {
      bat 'node -v';
      bat 'yarn -v';
      bat 'yarn install --ignore-engines';
      bat 'yarn ng:version';
    }

    stage('build') {
      bat "yarn build";
    }

    stage('e2e tests') {
      try {
        prepareFrontendFiles();
        prepareRuntimeFiles();
        prepareCdsFiles(cdsVersion);
        prepareDcmListsFiles(dcmListsVersion);

        bat "docker-compose --file .\\\\e2e\\\\docker\\\\docker-compose.yml build --build-arg BLUERIQ_LICENSE=${env.BLUERIQ_LICENSE}";
        bat "docker-compose --file .\\e2e\\docker\\docker-compose.yml up -d";

        // Warmup
        timeout(time: 180, unit: 'SECONDS') {
          waitUntil {
            try {
              String output = bat(
                script: "curl --connect-timeout 10 -i http://bq-docker-lin.blueriq.local:9082/runtime/server/start/kinderbijslag",
                returnStdout: true
              ).trim();
              return output.contains("HTTP/1.1 302");
            } catch (exception) {
              return false;
            }
          }
        }

        bat "yarn e2e --baseUrl ${env.PROTRACTOR_BASE_URL}";
      } finally {
        dir("e2e/docker") {
          bat "docker-compose down --rmi all";
        }
      }
    }
  } catch (anyException) {
    echo "An error occured (${anyException}) marking build as failed.";
    currentBuild.result = 'FAILURE';
  } finally {
    stage("Publish results") {
      // Test results
      publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'testresults', reportFiles: 'firefox.html, chrome.html', reportName: 'HTML Report', reportTitles: ''])
    }
    notifyBuildStatus();
    deleteDir();
  }
}// node

def prepareFrontendFiles() {
  bat "md e2e\\docker\\dist";
  bat "xcopy /I dist e2e\\docker\\dist";
}

def prepareRuntimeFiles() {
  bat "xcopy /I runtime\\Runtime\\runtime\\blueriq-runtime-application\\target\\*.war  e2e\\docker"
}

def prepareCdsFiles(cdsVersion) {
  bat "mvn dependency:copy -Dartifact=com.blueriq:blueriq-customerdata-sql-store-standalone:${cdsVersion}:jar -DoutputDirectory=e2e/docker"
}

def prepareDcmListsFiles(dcmListsVersion) {
  bat "mvn dependency:copy -Dartifact=com.blueriq:blueriq-dcm-lists-standalone:${dcmListsVersion}:jar -DoutputDirectory=e2e/docker"
}

def notifyBuildStatus() {
  // notify the person who started the build and the persons who's commits broke the build
  step([$class                  : 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients              : emailextrecipients([
          [$class: 'CulpritsRecipientProvider'],
          [$class: 'RequesterRecipientProvider']
        ])
  ]);

  step([$class                  : 'Mailer',
        notifyEveryUnstableBuild: true,
        sendToIndividuals       : true
  ]);
}
