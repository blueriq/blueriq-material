#!groovy

properties([
  [
    $class: 'BuildDiscarderProperty',
    strategy: [$class: 'LogRotator', numToKeepStr: '5']
  ],
  parameters([
    gitParameter(name: 'BRANCH_NAME', defaultValue: 'master', selectedValue: 'DEFAULT', type: 'PT_BRANCH'),
    string(name: 'RUNTIME_BRANCH', defaultValue: 'master', description: "The runtime branch to test against"),
    string(name: 'cdsVersion', defaultValue: '3.0.0', description: "The CDS version to test against"),
    string(name: 'caseEngineVersion', defaultValue: '1.0.0-SNAPSHOT', description: "The case engine version to test against"),
  ])
])
node {
  try {
    env.JAVA_HOME = tool 'jdk-11.0.1';
    def mvnHome = tool "apache-maven-3.6.0";
    env.PATH = "${env.PATH};${env.JAVA_HOME}\\bin;${mvnHome}\\bin;D:\\tools\\Firefox-61.0.1-32bit\\firefox.exe;D:\\tools\\ChromePortable-67.0.3396.99\\chrome.exe;${env.NODEJS_PATH}\"";
    env.SASS_BINARY_PATH = env.SASS_BINDING_PATH;

    stage('checkout') {
      checkout scm;
      bat "git checkout ${params.BRANCH_NAME}";
    }

    stage('checkout runtime') {
      dir('runtime') {
        git branch: "${params.RUNTIME_BRANCH}", url: "${env.RUNTIME_GIT_URL}";
        dir('Runtime') {
          bat "mvn clean verify -DskipTests -P!quality -am -pl runtime/blueriq-runtime-application";
        }
      }
    }

    stage('install') {
      bat 'node -v';
      bat 'yarn -v';
      bat 'yarn install';
      bat 'yarn ng:version';
    }

    stage('build') {
      bat "yarn build";
    }

    stage('e2e tests') {
      try {
        prepareFrontendFiles();
        prepareRuntimeFiles();
        prepareCdsFiles();
        prepareCaseEngineFiles();

        bat "docker-compose --file .\\\\e2e\\\\docker\\\\docker-compose.yml build --build-arg BLUERIQ_LICENSE=${env.BLUERIQ_LICENSE}";
        bat "docker-compose --file .\\e2e\\docker\\docker-compose.yml up -d";

        // Warmup
        timeout(time: 180, unit: 'SECONDS') {
          waitUntil {
            try {
              String output = bat (
                script: "curl --connect-timeout 10 -i http://bq-docker-lin.blueriq.local:9082/Runtime/server/start/kinderbijslag",
                returnStdout: true
              ).trim();
              return output.contains("HTTP/1.1 302");
            } catch(exception) {
              return false;
            }
          }
        }

        bat "yarn e2e --baseUrl ${env.PROTRACTOR_BASE_URL}";
      } finally {
        dir("e2e/docker") {
          bat "docker-compose down --rmi all";
        }
      }
    }
  } catch (anyException) {
    echo "An error occured (${anyException}) marking build as failed.";
    currentBuild.result = 'FAILURE';
  } finally {
    stage("Publish results") {
      // Test results
      publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true, reportDir: 'testresults', reportFiles: 'firefox.html, chrome.html', reportName: 'HTML Report', reportTitles: ''])
    }
    notifyBuildStatus();
    deleteDir();
  }
}// node

def prepareFrontendFiles() {
  bat "md e2e\\docker\\dist";
  bat "xcopy /I dist e2e\\docker\\dist";
}

def prepareRuntimeFiles() {
  bat "xcopy /I runtime\\Runtime\\runtime\\blueriq-runtime-application\\target\\*.war  e2e\\docker"
}

def prepareCdsFiles() {
  bat "mvn dependency:copy -Dartifact=com.blueriq:blueriq-customerdata-sql-store-standalone:${params.cdsVersion}:jar -DoutputDirectory=e2e/docker"
}

def prepareCaseEngineFiles() {
  bat "mvn dependency:copy -Dartifact=com.blueriq:blueriq-case-engine-tasklist-standalone:${params.caseEngineVersion}:jar -DoutputDirectory=e2e/docker"
}

def notifyBuildStatus() {
  // notify the person who started the build and the persons who's commits broke the build
  step([$class                  : 'Mailer',
        notifyEveryUnstableBuild: true,
        recipients              : emailextrecipients([
          [$class: 'CulpritsRecipientProvider'],
          [$class: 'RequesterRecipientProvider']
        ])
  ]);

  step([$class                  : 'Mailer',
        notifyEveryUnstableBuild: true,
        sendToIndividuals       : true
  ]);
}
